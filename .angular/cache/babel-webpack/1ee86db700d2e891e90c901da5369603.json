{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport Quagga from '@ericblade/quagga2';\nimport defaultsDeep from 'lodash.defaultsdeep';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nconst _c0 = [\"BarcodeScanner\"];\n\nfunction BarcodeScannerLivestreamOverlayComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function BarcodeScannerLivestreamOverlayComponent_div_2_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.hide();\n    });\n    i0.ɵɵtext(1, \" X \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst DEFAULT_CONFIG = {\n  inputStream: {\n    name: 'Live',\n    type: 'LiveStream',\n    target: null,\n    constraints: {\n      width: {\n        min: 640\n      },\n      height: {\n        min: 480\n      },\n      aspectRatio: {\n        min: 1,\n        max: 2\n      },\n      facingMode: 'environment' // or user\n\n    },\n    singleChannel: false // true: only the red color-channel is read\n\n  },\n  locator: {\n    patchSize: 'medium',\n    halfSample: true\n  },\n  locate: true,\n  numOfWorkers: 4,\n  decoder: {\n    readers: ['code_128_reader']\n  }\n};\nconst BARCODE_TYPES = ['code_128', 'code_39', 'code_39_vin', 'ean', 'ean_extended', 'ean_8', 'upc', 'upc_e', 'codabar', 'i2of5', '2of5', 'code_93'];\n\nfunction mapToReader(value) {\n  if (typeof value === 'string') {\n    checkBarCodeType(value);\n    return [mapToBarcodeType(value)];\n  } else {\n    return value.map(val => {\n      checkBarCodeType(val);\n      return mapToBarcodeType(val);\n    });\n  }\n}\n\nfunction checkBarCodeType(value) {\n  if (!BARCODE_TYPES.some(t => t === value)) {\n    throw new Error(`This barcode type '${value}' is not valid.`);\n  }\n}\n\nfunction mapToBarcodeType(value) {\n  return `${value}_reader`;\n}\n\nclass BarcodeScannerLivestreamComponent {\n  constructor() {\n    this.maxWidth = '100%';\n    this._valueChanges = new Subject(); // Outputs\n\n    this.valueChanges = new EventEmitter();\n    this.started = new EventEmitter();\n    this._started = false;\n    this._destroyed = new Subject();\n\n    this._valueChanges.pipe(takeUntil(this._destroyed), filter(result => {\n      const errors = result.codeResult.decodedCodes.filter(_ => _.error !== undefined).map(_ => _.error);\n\n      const median = this._getMedian(errors); //Filter result when median and/or threshold parameters are provided\n      //Good result for code_128 : median = 0.08 and threshold = 0.1\n\n\n      return !this.errorFilter || !(this.errorFilter.median && median > this.errorFilter.median || this.errorFilter.threshold && errors.some(err => err > this.errorFilter.threshold));\n    })).subscribe(result => {\n      const drawingCtx = Quagga.canvas.ctx.overlay;\n      Quagga.ImageDebug.drawPath(result.line, {\n        x: 'x',\n        y: 'y'\n      }, drawingCtx, {\n        color: 'red',\n        lineWidth: 3\n      });\n      this.valueChanges.next(result);\n    });\n  }\n\n  get _maxWidth() {\n    return this.maxWidth ? `${this.maxWidth}` : 'auto';\n  }\n\n  get _maxHeight() {\n    return this.maxHeight ? `${this.maxHeight}` : 'auto';\n  }\n\n  get isStarted() {\n    return this._started;\n  }\n\n  ngOnDestroy() {\n    this.stop();\n\n    this._destroyed.next(true);\n\n    this._destroyed.complete();\n  }\n\n  ngOnChanges() {\n    this.restart();\n  }\n\n  _init() {\n    return new Promise((resolve, reject) => {\n      Quagga.onProcessed(result => this.onProcessed(result));\n      Quagga.onDetected(result => this.onDetected(result));\n      this.configQuagga = defaultsDeep({}, this.config, DEFAULT_CONFIG);\n      this.configQuagga.inputStream.target = this.barcodeScanner.nativeElement;\n\n      if (this.type) {\n        this.configQuagga.decoder.readers = mapToReader(this.type);\n      }\n\n      if (this.deviceId) {\n        this.configQuagga.inputStream.constraints.deviceId = this.deviceId;\n      }\n\n      Quagga.init(this.configQuagga, err => {\n        if (err) {\n          console.log(err);\n          return reject(err);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  _getMedian(arr) {\n    arr.sort((a, b) => a - b);\n    const half = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 1) // Odd length\n      return arr[half];\n    return (arr[half - 1] + arr[half]) / 2.0;\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._started) {\n        yield this._init();\n        Quagga.start();\n        this._started = true;\n        this.started.next(true);\n      }\n    });\n  }\n\n  stop() {\n    if (this._started) {\n      Quagga.stop();\n      this._started = false;\n      this.started.next(false);\n    }\n  }\n\n  restart() {\n    if (this._started) {\n      this.stop();\n      this.start();\n    }\n  }\n\n  onProcessed(result) {\n    const drawingCtx = Quagga.canvas.ctx.overlay;\n    const drawingCanvas = Quagga.canvas.dom.overlay;\n\n    if (result) {\n      if (result.boxes) {\n        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));\n        result.boxes.filter(box => {\n          return box !== result.box;\n        }).forEach(box => {\n          Quagga.ImageDebug.drawPath(box, {\n            x: 0,\n            y: 1\n          }, drawingCtx, {\n            color: 'green',\n            lineWidth: 2\n          });\n        });\n      }\n\n      if (result.box) {\n        Quagga.ImageDebug.drawPath(result.box, {\n          x: 0,\n          y: 1\n        }, drawingCtx, {\n          color: '#00F',\n          lineWidth: 2\n        });\n      }\n    }\n  }\n\n  onDetected(result) {\n    this._valueChanges.next(result);\n  }\n\n}\n\nBarcodeScannerLivestreamComponent.ɵfac = function BarcodeScannerLivestreamComponent_Factory(t) {\n  return new (t || BarcodeScannerLivestreamComponent)();\n};\n\nBarcodeScannerLivestreamComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarcodeScannerLivestreamComponent,\n  selectors: [[\"barcode-scanner-livestream\"]],\n  viewQuery: function BarcodeScannerLivestreamComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.barcodeScanner = _t.first);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    deviceId: \"deviceId\",\n    maxWidth: \"maxWidth\",\n    maxHeight: \"maxHeight\",\n    config: \"config\",\n    errorFilter: \"errorFilter\"\n  },\n  outputs: {\n    valueChanges: \"valueChanges\",\n    started: \"started\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 13,\n  consts: [[1, \"scanner\", 3, \"hidden\"], [\"BarcodeScanner\", \"\"], [1, \"drawingBuffer\"]],\n  template: function BarcodeScannerLivestreamComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelement(2, \"video\");\n      i0.ɵɵelement(3, \"canvas\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"max-height\", ctx._maxHeight)(\"max-width\", ctx._maxWidth);\n      i0.ɵɵproperty(\"hidden\", !ctx.isStarted);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"max-height\", ctx._maxHeight)(\"max-width\", ctx._maxWidth);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"max-height\", ctx._maxHeight)(\"max-width\", ctx._maxWidth);\n    }\n  },\n  styles: [\".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarcodeScannerLivestreamComponent, [{\n    type: Component,\n    args: [{\n      selector: 'barcode-scanner-livestream',\n      templateUrl: './barcode-scanner-livestream.component.html',\n      styleUrls: ['./barcode-scanner-livestream.component.scss'],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [];\n  }, {\n    type: [{\n      type: Input\n    }],\n    deviceId: [{\n      type: Input\n    }],\n    maxWidth: [{\n      type: Input\n    }],\n    maxHeight: [{\n      type: Input\n    }],\n    config: [{\n      type: Input\n    }],\n    errorFilter: [{\n      type: Input\n    }],\n    valueChanges: [{\n      type: Output\n    }],\n    started: [{\n      type: Output\n    }],\n    barcodeScanner: [{\n      type: ViewChild,\n      args: ['BarcodeScanner']\n    }]\n  });\n})();\n\nclass BarcodeScannerLivestreamModule {}\n\nBarcodeScannerLivestreamModule.ɵfac = function BarcodeScannerLivestreamModule_Factory(t) {\n  return new (t || BarcodeScannerLivestreamModule)();\n};\n\nBarcodeScannerLivestreamModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarcodeScannerLivestreamModule\n});\nBarcodeScannerLivestreamModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarcodeScannerLivestreamModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [BarcodeScannerLivestreamComponent],\n      exports: [BarcodeScannerLivestreamComponent]\n    }]\n  }], null, null);\n})();\n\nclass BarcodeScannerLivestreamOverlayComponent {\n  constructor() {\n    this._started = false;\n    this.width = '90vw';\n    this.maxWidth = '640px';\n    this.valueChanges = new EventEmitter();\n    this.started = new EventEmitter();\n    this._showScanner = false;\n  }\n\n  get isStarted() {\n    return this._started;\n  }\n\n  get showScanner() {\n    return this._showScanner;\n  }\n\n  ngOnDestroy() {\n    this.scanner.stop();\n  }\n\n  show() {\n    this._showScanner = true;\n    this.scanner.start();\n  }\n\n  hide() {\n    this._showScanner = false;\n    this.scanner.stop();\n  }\n\n  onStarted(value) {\n    this._started = value;\n    this.started.next(value);\n  }\n\n  onValueChanges(result) {\n    this.valueChanges.next(result);\n  }\n\n}\n\nBarcodeScannerLivestreamOverlayComponent.ɵfac = function BarcodeScannerLivestreamOverlayComponent_Factory(t) {\n  return new (t || BarcodeScannerLivestreamOverlayComponent)();\n};\n\nBarcodeScannerLivestreamOverlayComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarcodeScannerLivestreamOverlayComponent,\n  selectors: [[\"barcode-scanner-livestream-overlay\"]],\n  viewQuery: function BarcodeScannerLivestreamOverlayComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(BarcodeScannerLivestreamComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scanner = _t.first);\n    }\n  },\n  inputs: {\n    type: \"type\",\n    deviceId: \"deviceId\",\n    width: \"width\",\n    maxWidth: \"maxWidth\",\n    height: \"height\",\n    maxHeight: \"maxHeight\",\n    config: \"config\"\n  },\n  outputs: {\n    valueChanges: \"valueChanges\",\n    started: \"started\"\n  },\n  decls: 4,\n  vars: 13,\n  consts: [[1, \"barcode-scanner-livestream-overlay\", 3, \"hidden\"], [1, \"barcode-scanner-livestream-overlay-content\"], [\"class\", \"barcode-scanner-livestream-overlay-close\", 3, \"click\", 4, \"ngIf\"], [3, \"type\", \"deviceId\", \"config\", \"valueChanges\", \"started\"], [1, \"barcode-scanner-livestream-overlay-close\", 3, \"click\"]],\n  template: function BarcodeScannerLivestreamOverlayComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, BarcodeScannerLivestreamOverlayComponent_div_2_Template, 2, 0, \"div\", 2);\n      i0.ɵɵelementStart(3, \"barcode-scanner-livestream\", 3);\n      i0.ɵɵlistener(\"valueChanges\", function BarcodeScannerLivestreamOverlayComponent_Template_barcode_scanner_livestream_valueChanges_3_listener($event) {\n        return ctx.onValueChanges($event);\n      })(\"started\", function BarcodeScannerLivestreamOverlayComponent_Template_barcode_scanner_livestream_started_3_listener($event) {\n        return ctx.onStarted($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"hidden\", !ctx.showScanner);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.width)(\"max-width\", ctx.maxWidth)(\"height\", ctx.height)(\"max-height\", ctx.maxHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isStarted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"deviceId\", ctx.deviceId)(\"config\", ctx.config);\n    }\n  },\n  directives: [i2.NgIf, BarcodeScannerLivestreamComponent],\n  styles: [\".barcode-scanner-livestream-overlay[_ngcontent-%COMP%]{overflow:hidden;position:fixed;top:0;bottom:0;left:0;right:0;width:100%;background-color:#0000004d;z-index:1000}.barcode-scanner-livestream-overlay[_ngcontent-%COMP%]   .barcode-scanner-livestream-overlay-content[_ngcontent-%COMP%]{top:50%;position:absolute;left:50%;transform:translate(-50%,-50%)}.barcode-scanner-livestream-overlay[_ngcontent-%COMP%]   .barcode-scanner-livestream-overlay-content[_ngcontent-%COMP%]   .barcode-scanner-livestream-overlay-close[_ngcontent-%COMP%]{position:absolute;right:0;padding:.5rem;width:1.5rem;height:1.5rem;line-height:1.5rem;text-align:center;background-color:#fff;cursor:pointer;border:2px solid black;font-size:1.3rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarcodeScannerLivestreamOverlayComponent, [{\n    type: Component,\n    args: [{\n      selector: 'barcode-scanner-livestream-overlay',\n      templateUrl: './barcode-scanner-livestream-overlay.component.html',\n      styleUrls: ['./barcode-scanner-livestream-overlay.component.scss']\n    }]\n  }], null, {\n    type: [{\n      type: Input\n    }],\n    deviceId: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    maxWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    maxHeight: [{\n      type: Input\n    }],\n    config: [{\n      type: Input\n    }],\n    valueChanges: [{\n      type: Output\n    }],\n    started: [{\n      type: Output\n    }],\n    scanner: [{\n      type: ViewChild,\n      args: [BarcodeScannerLivestreamComponent]\n    }]\n  });\n})();\n\nclass BarcodeScannerLivestreamOverlayModule {}\n\nBarcodeScannerLivestreamOverlayModule.ɵfac = function BarcodeScannerLivestreamOverlayModule_Factory(t) {\n  return new (t || BarcodeScannerLivestreamOverlayModule)();\n};\n\nBarcodeScannerLivestreamOverlayModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarcodeScannerLivestreamOverlayModule\n});\nBarcodeScannerLivestreamOverlayModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, BarcodeScannerLivestreamModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarcodeScannerLivestreamOverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, BarcodeScannerLivestreamModule],\n      declarations: [BarcodeScannerLivestreamOverlayComponent],\n      exports: [BarcodeScannerLivestreamOverlayComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-barcode-scanner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BarcodeScannerLivestreamComponent, BarcodeScannerLivestreamModule, BarcodeScannerLivestreamOverlayComponent, BarcodeScannerLivestreamOverlayModule };","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Work/SugarCaneFarAway/node_modules/ngx-barcode-scanner/fesm2015/ngx-barcode-scanner.js"],"names":["i2","CommonModule","i0","EventEmitter","Component","ViewEncapsulation","Input","Output","ViewChild","NgModule","__awaiter","Quagga","defaultsDeep","Subject","takeUntil","filter","DEFAULT_CONFIG","inputStream","name","type","target","constraints","width","min","height","aspectRatio","max","facingMode","singleChannel","locator","patchSize","halfSample","locate","numOfWorkers","decoder","readers","BARCODE_TYPES","mapToReader","value","checkBarCodeType","mapToBarcodeType","map","val","some","t","Error","BarcodeScannerLivestreamComponent","constructor","maxWidth","_valueChanges","valueChanges","started","_started","_destroyed","pipe","result","errors","codeResult","decodedCodes","_","error","undefined","median","_getMedian","errorFilter","threshold","err","subscribe","drawingCtx","canvas","ctx","overlay","ImageDebug","drawPath","line","x","y","color","lineWidth","next","_maxWidth","_maxHeight","maxHeight","isStarted","ngOnDestroy","stop","complete","ngOnChanges","restart","_init","Promise","resolve","reject","onProcessed","onDetected","configQuagga","config","barcodeScanner","nativeElement","deviceId","init","console","log","arr","sort","a","b","half","Math","floor","length","start","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","box","forEach","ɵfac","ɵcmp","args","selector","templateUrl","styleUrls","encapsulation","None","BarcodeScannerLivestreamModule","ɵmod","ɵinj","imports","declarations","exports","BarcodeScannerLivestreamOverlayComponent","_showScanner","showScanner","scanner","show","hide","onStarted","onValueChanges","NgIf","BarcodeScannerLivestreamOverlayModule"],"mappings":"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","sourcesContent":["import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport Quagga from '@ericblade/quagga2';\nimport defaultsDeep from 'lodash.defaultsdeep';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\n\nconst DEFAULT_CONFIG = {\n    inputStream: {\n        name: 'Live',\n        type: 'LiveStream',\n        target: null,\n        constraints: {\n            width: { min: 640 },\n            height: { min: 480 },\n            aspectRatio: { min: 1, max: 2 },\n            facingMode: 'environment', // or user\n        },\n        singleChannel: false // true: only the red color-channel is read\n    },\n    locator: {\n        patchSize: 'medium',\n        halfSample: true\n    },\n    locate: true,\n    numOfWorkers: 4,\n    decoder: {\n        readers: ['code_128_reader']\n    }\n};\n\nconst BARCODE_TYPES = [\n    'code_128',\n    'code_39',\n    'code_39_vin',\n    'ean',\n    'ean_extended',\n    'ean_8',\n    'upc',\n    'upc_e',\n    'codabar',\n    'i2of5',\n    '2of5',\n    'code_93'\n];\nfunction mapToReader(value) {\n    if (typeof value === 'string') {\n        checkBarCodeType(value);\n        return [mapToBarcodeType(value)];\n    }\n    else {\n        return value.map(val => {\n            checkBarCodeType(val);\n            return mapToBarcodeType(val);\n        });\n    }\n}\nfunction checkBarCodeType(value) {\n    if (!BARCODE_TYPES.some(t => t === value)) {\n        throw new Error(`This barcode type '${value}' is not valid.`);\n    }\n}\nfunction mapToBarcodeType(value) {\n    return `${value}_reader`;\n}\n\nclass BarcodeScannerLivestreamComponent {\n    constructor() {\n        this.maxWidth = '100%';\n        this._valueChanges = new Subject();\n        // Outputs\n        this.valueChanges = new EventEmitter();\n        this.started = new EventEmitter();\n        this._started = false;\n        this._destroyed = new Subject();\n        this._valueChanges.pipe(takeUntil(this._destroyed), filter((result) => {\n            const errors = result.codeResult.decodedCodes\n                .filter(_ => _.error !== undefined)\n                .map(_ => _.error);\n            const median = this._getMedian(errors);\n            //Filter result when median and/or threshold parameters are provided\n            //Good result for code_128 : median = 0.08 and threshold = 0.1\n            return !this.errorFilter ||\n                !(this.errorFilter.median && median > this.errorFilter.median\n                    || this.errorFilter.threshold && errors.some(err => err > this.errorFilter.threshold));\n        })).subscribe(result => {\n            const drawingCtx = Quagga.canvas.ctx.overlay;\n            Quagga.ImageDebug.drawPath(result.line, {\n                x: 'x',\n                y: 'y',\n            }, drawingCtx, {\n                color: 'red',\n                lineWidth: 3,\n            });\n            this.valueChanges.next(result);\n        });\n    }\n    get _maxWidth() {\n        return this.maxWidth ? `${this.maxWidth}` : 'auto';\n    }\n    get _maxHeight() {\n        return this.maxHeight ? `${this.maxHeight}` : 'auto';\n    }\n    get isStarted() {\n        return this._started;\n    }\n    ngOnDestroy() {\n        this.stop();\n        this._destroyed.next(true);\n        this._destroyed.complete();\n    }\n    ngOnChanges() {\n        this.restart();\n    }\n    _init() {\n        return new Promise((resolve, reject) => {\n            Quagga.onProcessed((result) => this.onProcessed(result));\n            Quagga.onDetected((result) => this.onDetected(result));\n            this.configQuagga = defaultsDeep({}, this.config, DEFAULT_CONFIG);\n            this.configQuagga.inputStream.target = this.barcodeScanner.nativeElement;\n            if (this.type) {\n                this.configQuagga.decoder.readers = mapToReader(this.type);\n            }\n            if (this.deviceId) {\n                this.configQuagga.inputStream.constraints.deviceId = this.deviceId;\n            }\n            Quagga.init(this.configQuagga, (err) => {\n                if (err) {\n                    console.log(err);\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n    _getMedian(arr) {\n        arr.sort((a, b) => a - b);\n        const half = Math.floor(arr.length / 2);\n        if (arr.length % 2 === 1) // Odd length\n            return arr[half];\n        return (arr[half - 1] + arr[half]) / 2.0;\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._started) {\n                yield this._init();\n                Quagga.start();\n                this._started = true;\n                this.started.next(true);\n            }\n        });\n    }\n    stop() {\n        if (this._started) {\n            Quagga.stop();\n            this._started = false;\n            this.started.next(false);\n        }\n    }\n    restart() {\n        if (this._started) {\n            this.stop();\n            this.start();\n        }\n    }\n    onProcessed(result) {\n        const drawingCtx = Quagga.canvas.ctx.overlay;\n        const drawingCanvas = Quagga.canvas.dom.overlay;\n        if (result) {\n            if (result.boxes) {\n                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));\n                result.boxes.filter((box) => {\n                    return box !== result.box;\n                }).forEach((box) => {\n                    Quagga.ImageDebug.drawPath(box, {\n                        x: 0,\n                        y: 1,\n                    }, drawingCtx, {\n                        color: 'green',\n                        lineWidth: 2,\n                    });\n                });\n            }\n            if (result.box) {\n                Quagga.ImageDebug.drawPath(result.box, {\n                    x: 0,\n                    y: 1,\n                }, drawingCtx, {\n                    color: '#00F',\n                    lineWidth: 2,\n                });\n            }\n        }\n    }\n    onDetected(result) {\n        this._valueChanges.next(result);\n    }\n}\nBarcodeScannerLivestreamComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBarcodeScannerLivestreamComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.11\", type: BarcodeScannerLivestreamComponent, selector: \"barcode-scanner-livestream\", inputs: { type: \"type\", deviceId: \"deviceId\", maxWidth: \"maxWidth\", maxHeight: \"maxHeight\", config: \"config\", errorFilter: \"errorFilter\" }, outputs: { valueChanges: \"valueChanges\", started: \"started\" }, viewQueries: [{ propertyName: \"barcodeScanner\", first: true, predicate: [\"BarcodeScanner\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n  #BarcodeScanner\\n  class=\\\"scanner\\\"\\n  [hidden]=\\\"!isStarted\\\"\\n  [style.max-height]=\\\"_maxHeight\\\"\\n  [style.max-width]=\\\"_maxWidth\\\"\\n>\\n  <video [style.max-height]=\\\"_maxHeight\\\" [style.max-width]=\\\"_maxWidth\\\"></video>\\n  <canvas\\n    [style.max-height]=\\\"_maxHeight\\\"\\n    [style.max-width]=\\\"_maxWidth\\\"\\n    class=\\\"drawingBuffer\\\"\\n  ></canvas>\\n</div>\\n\", styles: [\".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\\n\"], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'barcode-scanner-livestream',\n                    templateUrl: './barcode-scanner-livestream.component.html',\n                    styleUrls: ['./barcode-scanner-livestream.component.scss'],\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { type: [{\n                type: Input\n            }], deviceId: [{\n                type: Input\n            }], maxWidth: [{\n                type: Input\n            }], maxHeight: [{\n                type: Input\n            }], config: [{\n                type: Input\n            }], errorFilter: [{\n                type: Input\n            }], valueChanges: [{\n                type: Output\n            }], started: [{\n                type: Output\n            }], barcodeScanner: [{\n                type: ViewChild,\n                args: ['BarcodeScanner']\n            }] } });\n\nclass BarcodeScannerLivestreamModule {\n}\nBarcodeScannerLivestreamModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarcodeScannerLivestreamModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamModule, declarations: [BarcodeScannerLivestreamComponent], imports: [CommonModule], exports: [BarcodeScannerLivestreamComponent] });\nBarcodeScannerLivestreamModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        BarcodeScannerLivestreamComponent\n                    ],\n                    exports: [\n                        BarcodeScannerLivestreamComponent\n                    ]\n                }]\n        }] });\n\nclass BarcodeScannerLivestreamOverlayComponent {\n    constructor() {\n        this._started = false;\n        this.width = '90vw';\n        this.maxWidth = '640px';\n        this.valueChanges = new EventEmitter();\n        this.started = new EventEmitter();\n        this._showScanner = false;\n    }\n    get isStarted() {\n        return this._started;\n    }\n    get showScanner() {\n        return this._showScanner;\n    }\n    ngOnDestroy() {\n        this.scanner.stop();\n    }\n    show() {\n        this._showScanner = true;\n        this.scanner.start();\n    }\n    hide() {\n        this._showScanner = false;\n        this.scanner.stop();\n    }\n    onStarted(value) {\n        this._started = value;\n        this.started.next(value);\n    }\n    onValueChanges(result) {\n        this.valueChanges.next(result);\n    }\n}\nBarcodeScannerLivestreamOverlayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamOverlayComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBarcodeScannerLivestreamOverlayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.11\", type: BarcodeScannerLivestreamOverlayComponent, selector: \"barcode-scanner-livestream-overlay\", inputs: { type: \"type\", deviceId: \"deviceId\", width: \"width\", maxWidth: \"maxWidth\", height: \"height\", maxHeight: \"maxHeight\", config: \"config\" }, outputs: { valueChanges: \"valueChanges\", started: \"started\" }, viewQueries: [{ propertyName: \"scanner\", first: true, predicate: BarcodeScannerLivestreamComponent, descendants: true }], ngImport: i0, template: \"<div class=\\\"barcode-scanner-livestream-overlay\\\" [hidden]=\\\"!showScanner\\\">\\n  <div\\n    class=\\\"barcode-scanner-livestream-overlay-content\\\"\\n    [style.width]=\\\"width\\\"\\n    [style.max-width]=\\\"maxWidth\\\"\\n    [style.height]=\\\"height\\\"\\n    [style.max-height]=\\\"maxHeight\\\"\\n  >\\n    <div\\n      class=\\\"barcode-scanner-livestream-overlay-close\\\"\\n      *ngIf=\\\"isStarted\\\"\\n      (click)=\\\"hide()\\\"\\n    >\\n      X\\n    </div>\\n    <barcode-scanner-livestream\\n      [type]=\\\"type\\\"\\n      [deviceId]=\\\"deviceId\\\"\\n      [config]=\\\"config\\\"\\n      (valueChanges)=\\\"onValueChanges($event)\\\"\\n      (started)=\\\"onStarted($event)\\\"\\n    ></barcode-scanner-livestream>\\n  </div>\\n</div>\\n\", styles: [\".barcode-scanner-livestream-overlay{overflow:hidden;position:fixed;top:0;bottom:0;left:0;right:0;width:100%;background-color:#0000004d;z-index:1000}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content{top:50%;position:absolute;left:50%;transform:translate(-50%,-50%)}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content .barcode-scanner-livestream-overlay-close{position:absolute;right:0;padding:.5rem;width:1.5rem;height:1.5rem;line-height:1.5rem;text-align:center;background-color:#fff;cursor:pointer;border:2px solid black;font-size:1.3rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}\\n\"], components: [{ type: BarcodeScannerLivestreamComponent, selector: \"barcode-scanner-livestream\", inputs: [\"type\", \"deviceId\", \"maxWidth\", \"maxHeight\", \"config\", \"errorFilter\"], outputs: [\"valueChanges\", \"started\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamOverlayComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'barcode-scanner-livestream-overlay',\n                    templateUrl: './barcode-scanner-livestream-overlay.component.html',\n                    styleUrls: ['./barcode-scanner-livestream-overlay.component.scss'],\n                }]\n        }], propDecorators: { type: [{\n                type: Input\n            }], deviceId: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], maxWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], maxHeight: [{\n                type: Input\n            }], config: [{\n                type: Input\n            }], valueChanges: [{\n                type: Output\n            }], started: [{\n                type: Output\n            }], scanner: [{\n                type: ViewChild,\n                args: [BarcodeScannerLivestreamComponent]\n            }] } });\n\nclass BarcodeScannerLivestreamOverlayModule {\n}\nBarcodeScannerLivestreamOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarcodeScannerLivestreamOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, declarations: [BarcodeScannerLivestreamOverlayComponent], imports: [CommonModule,\n        BarcodeScannerLivestreamModule], exports: [BarcodeScannerLivestreamOverlayComponent] });\nBarcodeScannerLivestreamOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, imports: [[\n            CommonModule,\n            BarcodeScannerLivestreamModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.11\", ngImport: i0, type: BarcodeScannerLivestreamOverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        BarcodeScannerLivestreamModule\n                    ],\n                    declarations: [\n                        BarcodeScannerLivestreamOverlayComponent\n                    ],\n                    exports: [\n                        BarcodeScannerLivestreamOverlayComponent\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-barcode-scanner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BarcodeScannerLivestreamComponent, BarcodeScannerLivestreamModule, BarcodeScannerLivestreamOverlayComponent, BarcodeScannerLivestreamOverlayModule };\n"]},"metadata":{},"sourceType":"module"}