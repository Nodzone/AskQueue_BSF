{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport Quagga from '@ericblade/quagga2';\nimport defaultsDeep from 'lodash.defaultsdeep';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nconst _c0 = [\"BarcodeScanner\"];\n\nfunction BarcodeScannerLivestreamOverlayComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function BarcodeScannerLivestreamOverlayComponent_div_2_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.hide();\n    });\n    i0.ɵɵtext(1, \" X \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst DEFAULT_CONFIG = {\n  inputStream: {\n    name: 'Live',\n    type: 'LiveStream',\n    target: null,\n    constraints: {\n      width: {\n        min: 640\n      },\n      height: {\n        min: 480\n      },\n      aspectRatio: {\n        min: 1,\n        max: 2\n      },\n      facingMode: 'environment' // or user\n\n    },\n    singleChannel: false // true: only the red color-channel is read\n\n  },\n  locator: {\n    patchSize: 'medium',\n    halfSample: true\n  },\n  locate: true,\n  numOfWorkers: 4,\n  decoder: {\n    readers: ['code_128_reader']\n  }\n};\nconst BARCODE_TYPES = ['code_128', 'code_39', 'code_39_vin', 'ean', 'ean_extended', 'ean_8', 'upc', 'upc_e', 'codabar', 'i2of5', '2of5', 'code_93'];\n\nfunction mapToReader(value) {\n  if (typeof value === 'string') {\n    checkBarCodeType(value);\n    return [mapToBarcodeType(value)];\n  } else {\n    return value.map(val => {\n      checkBarCodeType(val);\n      return mapToBarcodeType(val);\n    });\n  }\n}\n\nfunction checkBarCodeType(value) {\n  if (!BARCODE_TYPES.some(t => t === value)) {\n    throw new Error(`This barcode type '${value}' is not valid.`);\n  }\n}\n\nfunction mapToBarcodeType(value) {\n  return `${value}_reader`;\n}\n\nlet BarcodeScannerLivestreamComponent = /*#__PURE__*/(() => {\n  class BarcodeScannerLivestreamComponent {\n    constructor() {\n      this.maxWidth = '100%';\n      this._valueChanges = new Subject(); // Outputs\n\n      this.valueChanges = new EventEmitter();\n      this.started = new EventEmitter();\n      this._started = false;\n      this._destroyed = new Subject();\n\n      this._valueChanges.pipe(takeUntil(this._destroyed), filter(result => {\n        const errors = result.codeResult.decodedCodes.filter(_ => _.error !== undefined).map(_ => _.error);\n\n        const median = this._getMedian(errors); //Filter result when median and/or threshold parameters are provided\n        //Good result for code_128 : median = 0.08 and threshold = 0.1\n\n\n        return !this.errorFilter || !(this.errorFilter.median && median > this.errorFilter.median || this.errorFilter.threshold && errors.some(err => err > this.errorFilter.threshold));\n      })).subscribe(result => {\n        const drawingCtx = Quagga.canvas.ctx.overlay;\n        Quagga.ImageDebug.drawPath(result.line, {\n          x: 'x',\n          y: 'y'\n        }, drawingCtx, {\n          color: 'red',\n          lineWidth: 3\n        });\n        this.valueChanges.next(result);\n      });\n    }\n\n    get _maxWidth() {\n      return this.maxWidth ? `${this.maxWidth}` : 'auto';\n    }\n\n    get _maxHeight() {\n      return this.maxHeight ? `${this.maxHeight}` : 'auto';\n    }\n\n    get isStarted() {\n      return this._started;\n    }\n\n    ngOnDestroy() {\n      this.stop();\n\n      this._destroyed.next(true);\n\n      this._destroyed.complete();\n    }\n\n    ngOnChanges() {\n      this.restart();\n    }\n\n    _init() {\n      return new Promise((resolve, reject) => {\n        Quagga.onProcessed(result => this.onProcessed(result));\n        Quagga.onDetected(result => this.onDetected(result));\n        this.configQuagga = defaultsDeep({}, this.config, DEFAULT_CONFIG);\n        this.configQuagga.inputStream.target = this.barcodeScanner.nativeElement;\n\n        if (this.type) {\n          this.configQuagga.decoder.readers = mapToReader(this.type);\n        }\n\n        if (this.deviceId) {\n          this.configQuagga.inputStream.constraints.deviceId = this.deviceId;\n        }\n\n        Quagga.init(this.configQuagga, err => {\n          if (err) {\n            console.log(err);\n            return reject(err);\n          }\n\n          resolve();\n        });\n      });\n    }\n\n    _getMedian(arr) {\n      arr.sort((a, b) => a - b);\n      const half = Math.floor(arr.length / 2);\n      if (arr.length % 2 === 1) // Odd length\n        return arr[half];\n      return (arr[half - 1] + arr[half]) / 2.0;\n    }\n\n    start() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!this._started) {\n          yield this._init();\n          Quagga.start();\n          this._started = true;\n          this.started.next(true);\n        }\n      });\n    }\n\n    stop() {\n      if (this._started) {\n        Quagga.stop();\n        this._started = false;\n        this.started.next(false);\n      }\n    }\n\n    restart() {\n      if (this._started) {\n        this.stop();\n        this.start();\n      }\n    }\n\n    onProcessed(result) {\n      const drawingCtx = Quagga.canvas.ctx.overlay;\n      const drawingCanvas = Quagga.canvas.dom.overlay;\n\n      if (result) {\n        if (result.boxes) {\n          drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));\n          result.boxes.filter(box => {\n            return box !== result.box;\n          }).forEach(box => {\n            Quagga.ImageDebug.drawPath(box, {\n              x: 0,\n              y: 1\n            }, drawingCtx, {\n              color: 'green',\n              lineWidth: 2\n            });\n          });\n        }\n\n        if (result.box) {\n          Quagga.ImageDebug.drawPath(result.box, {\n            x: 0,\n            y: 1\n          }, drawingCtx, {\n            color: '#00F',\n            lineWidth: 2\n          });\n        }\n      }\n    }\n\n    onDetected(result) {\n      this._valueChanges.next(result);\n    }\n\n  }\n\n  BarcodeScannerLivestreamComponent.ɵfac = function BarcodeScannerLivestreamComponent_Factory(t) {\n    return new (t || BarcodeScannerLivestreamComponent)();\n  };\n\n  BarcodeScannerLivestreamComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BarcodeScannerLivestreamComponent,\n    selectors: [[\"barcode-scanner-livestream\"]],\n    viewQuery: function BarcodeScannerLivestreamComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.barcodeScanner = _t.first);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      deviceId: \"deviceId\",\n      maxWidth: \"maxWidth\",\n      maxHeight: \"maxHeight\",\n      config: \"config\",\n      errorFilter: \"errorFilter\"\n    },\n    outputs: {\n      valueChanges: \"valueChanges\",\n      started: \"started\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 13,\n    consts: [[1, \"scanner\", 3, \"hidden\"], [\"BarcodeScanner\", \"\"], [1, \"drawingBuffer\"]],\n    template: function BarcodeScannerLivestreamComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵelement(2, \"video\");\n        i0.ɵɵelement(3, \"canvas\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"max-height\", ctx._maxHeight)(\"max-width\", ctx._maxWidth);\n        i0.ɵɵproperty(\"hidden\", !ctx.isStarted);\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"max-height\", ctx._maxHeight)(\"max-width\", ctx._maxWidth);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"max-height\", ctx._maxHeight)(\"max-width\", ctx._maxWidth);\n      }\n    },\n    styles: [\".scanner{position:relative}.scanner video,.scanner canvas{width:100%;height:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}\\n\"],\n    encapsulation: 2\n  });\n  return BarcodeScannerLivestreamComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarcodeScannerLivestreamModule = /*#__PURE__*/(() => {\n  class BarcodeScannerLivestreamModule {}\n\n  BarcodeScannerLivestreamModule.ɵfac = function BarcodeScannerLivestreamModule_Factory(t) {\n    return new (t || BarcodeScannerLivestreamModule)();\n  };\n\n  BarcodeScannerLivestreamModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BarcodeScannerLivestreamModule\n  });\n  BarcodeScannerLivestreamModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return BarcodeScannerLivestreamModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarcodeScannerLivestreamOverlayComponent = /*#__PURE__*/(() => {\n  class BarcodeScannerLivestreamOverlayComponent {\n    constructor() {\n      this._started = false;\n      this.width = '90vw';\n      this.maxWidth = '640px';\n      this.valueChanges = new EventEmitter();\n      this.started = new EventEmitter();\n      this._showScanner = false;\n    }\n\n    get isStarted() {\n      return this._started;\n    }\n\n    get showScanner() {\n      return this._showScanner;\n    }\n\n    ngOnDestroy() {\n      this.scanner.stop();\n    }\n\n    show() {\n      this._showScanner = true;\n      this.scanner.start();\n    }\n\n    hide() {\n      this._showScanner = false;\n      this.scanner.stop();\n    }\n\n    onStarted(value) {\n      this._started = value;\n      this.started.next(value);\n    }\n\n    onValueChanges(result) {\n      this.valueChanges.next(result);\n    }\n\n  }\n\n  BarcodeScannerLivestreamOverlayComponent.ɵfac = function BarcodeScannerLivestreamOverlayComponent_Factory(t) {\n    return new (t || BarcodeScannerLivestreamOverlayComponent)();\n  };\n\n  BarcodeScannerLivestreamOverlayComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BarcodeScannerLivestreamOverlayComponent,\n    selectors: [[\"barcode-scanner-livestream-overlay\"]],\n    viewQuery: function BarcodeScannerLivestreamOverlayComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BarcodeScannerLivestreamComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scanner = _t.first);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      deviceId: \"deviceId\",\n      width: \"width\",\n      maxWidth: \"maxWidth\",\n      height: \"height\",\n      maxHeight: \"maxHeight\",\n      config: \"config\"\n    },\n    outputs: {\n      valueChanges: \"valueChanges\",\n      started: \"started\"\n    },\n    decls: 4,\n    vars: 13,\n    consts: [[1, \"barcode-scanner-livestream-overlay\", 3, \"hidden\"], [1, \"barcode-scanner-livestream-overlay-content\"], [\"class\", \"barcode-scanner-livestream-overlay-close\", 3, \"click\", 4, \"ngIf\"], [3, \"type\", \"deviceId\", \"config\", \"valueChanges\", \"started\"], [1, \"barcode-scanner-livestream-overlay-close\", 3, \"click\"]],\n    template: function BarcodeScannerLivestreamOverlayComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, BarcodeScannerLivestreamOverlayComponent_div_2_Template, 2, 0, \"div\", 2);\n        i0.ɵɵelementStart(3, \"barcode-scanner-livestream\", 3);\n        i0.ɵɵlistener(\"valueChanges\", function BarcodeScannerLivestreamOverlayComponent_Template_barcode_scanner_livestream_valueChanges_3_listener($event) {\n          return ctx.onValueChanges($event);\n        })(\"started\", function BarcodeScannerLivestreamOverlayComponent_Template_barcode_scanner_livestream_started_3_listener($event) {\n          return ctx.onStarted($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hidden\", !ctx.showScanner);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"width\", ctx.width)(\"max-width\", ctx.maxWidth)(\"height\", ctx.height)(\"max-height\", ctx.maxHeight);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isStarted);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"type\", ctx.type)(\"deviceId\", ctx.deviceId)(\"config\", ctx.config);\n      }\n    },\n    directives: [i2.NgIf, BarcodeScannerLivestreamComponent],\n    styles: [\".barcode-scanner-livestream-overlay[_ngcontent-%COMP%]{overflow:hidden;position:fixed;top:0;bottom:0;left:0;right:0;width:100%;background-color:#0000004d;z-index:1000}.barcode-scanner-livestream-overlay[_ngcontent-%COMP%]   .barcode-scanner-livestream-overlay-content[_ngcontent-%COMP%]{top:50%;position:absolute;left:50%;transform:translate(-50%,-50%)}.barcode-scanner-livestream-overlay[_ngcontent-%COMP%]   .barcode-scanner-livestream-overlay-content[_ngcontent-%COMP%]   .barcode-scanner-livestream-overlay-close[_ngcontent-%COMP%]{position:absolute;right:0;padding:.5rem;width:1.5rem;height:1.5rem;line-height:1.5rem;text-align:center;background-color:#fff;cursor:pointer;border:2px solid black;font-size:1.3rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}\"]\n  });\n  return BarcodeScannerLivestreamOverlayComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BarcodeScannerLivestreamOverlayModule = /*#__PURE__*/(() => {\n  class BarcodeScannerLivestreamOverlayModule {}\n\n  BarcodeScannerLivestreamOverlayModule.ɵfac = function BarcodeScannerLivestreamOverlayModule_Factory(t) {\n    return new (t || BarcodeScannerLivestreamOverlayModule)();\n  };\n\n  BarcodeScannerLivestreamOverlayModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BarcodeScannerLivestreamOverlayModule\n  });\n  BarcodeScannerLivestreamOverlayModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, BarcodeScannerLivestreamModule]]\n  });\n  return BarcodeScannerLivestreamOverlayModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-barcode-scanner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BarcodeScannerLivestreamComponent, BarcodeScannerLivestreamModule, BarcodeScannerLivestreamOverlayComponent, BarcodeScannerLivestreamOverlayModule }; //# sourceMappingURL=ngx-barcode-scanner.js.map","map":null,"metadata":{},"sourceType":"module"}